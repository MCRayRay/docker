#!/usr/bin/env python -u
import argparse
import logging
import shlex
import sys
import os
from subprocess import Popen, PIPE, STDOUT
import tempfile

if os.environ.get('RD_CONFIG_DEBUG') == 'true':
    log_level = 'DEBUG'
else:
    log_level = 'ERROR'

logging.basicConfig(
    stream=sys.stdout,
    level=getattr(logging, log_level),
    format='%(levelname)s: %(name)s: %(message)s'
)
log = logging.getLogger('docker-run-script')

PY = sys.version_info[0]

def execute_command(ps_command):
    p = Popen(
        ' '.join(ps_command),
        stdout=PIPE,
        stderr=STDOUT,
        shell=True
    )

    # Print lines to stdout while waiting for command to finish
    while True:
        line = p.stdout.readline().rstrip()
        if line:
            print(line.decode())
        if p.poll() is not None:
            break

    exitcode = p.poll()
    return exitcode


def copy_file(container , source , destination):
    ps_command = ["docker", "cp"]
    ps_command.append(source)
    ps_command.append(container + ":" + destination)

    log.debug("copy command: %s" %ps_command)

    p = Popen(
        ' '.join(ps_command),
        stdout=PIPE,
        stderr=STDOUT,
        shell=True
    )

    # Print lines to stdout while waiting for command to finish
    while True:
        line = p.stdout.readline().rstrip()
        if line:
            print(line.decode())
        if p.poll() is not None:
            break

    exitcode = p.poll()
    return exitcode


parser = argparse.ArgumentParser(
    description='Execute a command string in the container.'
)
parser.add_argument('container', help='the container ID')
parser.add_argument('user', help='the user ID')
#parser.add_argument('command', help='the command string to execute')
args = parser.parse_args()

if 'RD_CONFIG_DOCKER_HOST' in os.environ:
    os.environ['DOCKER_HOST'] = os.environ['RD_CONFIG_DOCKER_HOST']
    log.debug('DOCKER_HOST set to %s' % os.environ['RD_CONFIG_DOCKER_HOST'])
else:
    log.debug('RD_CONFIG_DOCKER_HOST environment variable not defined.')

if 'RD_CONFIG_DOCKER_CERT_PATH' in os.environ:
    os.environ['DOCKER_CERT_PATH'] = os.environ['RD_CONFIG_DOCKER_CERT_PATH']
    log.debug('DOCKER_CERT_PATH=%s' % os.environ['RD_CONFIG_DOCKER_CERT_PATH'])
else:
    log.debug('RD_CONFIG_DOCKER_CERT_PATH environment variable not defined.')

if 'RD_CONFIG_DOCKER_TLS_VERIFY' in os.environ:
    os.environ['DOCKER_TLS_VERIFY'] = os.environ['RD_CONFIG_DOCKER_TLS_VERIFY']
    log.debug(
        'DOCKER_TLS_VERIFY=%s' % os.environ['RD_CONFIG_DOCKER_TLS_VERIFY']
    )
else:
    log.debug(
        'RD_CONFIG_DOCKER_TLS_VERIFY environment variable not defined.'
    )

shell = None
if 'RD_CONFIG_SHELL' in os.environ:
    shell = os.environ['RD_CONFIG_SHELL']

command = None

script = os.environ.get('RD_CONFIG_SCRIPT')

# Python 3 expects bytes string to transfer the data.
if PY == 3:
    script = script.encode('utf-8')

if script is None:
    log.error('script was not set')
    sys.exit(1)


log.debug(
    "Executing command string '%s' in container '%s'"
    "..." % (command, args.container)
)

destination_path = "/tmp"
invocation = "/bin/bash"
container = args.container

if 'RD_CONFIG_INVOCATION' in os.environ:
    invocation = os.environ.get('RD_CONFIG_INVOCATION')


temp = tempfile.NamedTemporaryFile()
destination_file_name = os.path.basename(temp.name)
full_path = destination_path + "/" + destination_file_name

# COPY SCRIPT TO CONTAINER
try:
    temp.write(script)
    temp.seek(0)
    copy_file(container, temp.name, full_path)

    log.debug("coping script from %s to %s" % (temp.name, full_path))

finally:
    temp.close()

# SET PERMISSIONS
permissions_command = ["docker","exec"]
permissions_command.append(container)
permissions_command.append("chmod")
permissions_command.append("+x")
permissions_command.append(full_path)

log.debug("setting permissions %s" % permissions_command)
exitcode = execute_command(permissions_command)

# RUN SCRIPT

# calling exec and wait for response.
exec_command = invocation.split(" ")
exec_command.append(full_path)

if 'RD_CONFIG_ARGUMENTS' in os.environ:
    arguments = os.environ.get('RD_CONFIG_ARGUMENTS')
    exec_command.append(arguments)

log.debug("running script %s" % exec_command)

ps_command = ["docker","exec"]

if args.user:
    ps_command.append("--user")
    ps_command.append(args.user)

ps_command.append(container)

for cmd in exec_command:
    ps_command.append(cmd)

log.debug(
    "Executing command string '%s' "
    "..." % ps_command
)

exitcode = execute_command(ps_command)

if exitcode != 0:
    log.error('Command execution failed with exit code: %s' % str(exitcode))

# done
sys.exit(exitcode)
